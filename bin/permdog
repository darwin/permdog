#!/usr/bin/env ruby

require 'bundler/setup'
require 'listen'
require 'colored'
require 'etc'

def escapeQ(s)
  s.gsub("\n", "\\n").gsub('\\', '\\\\').gsub('"','\"')
end

def setFinderComment(file, comment)
  apple_script = "tell application \"Finder\" to set comment of alias POSIX file \"#{escapeQ(file)}\" to \"#{escapeQ(comment)}\""
  cmd = "osascript -e \"#{escapeQ(apple_script)}\""
  puts "  setting comment of ".magenta + file.blue + " to ".magenta + comment.green
  `#{cmd}`
end

def getFinderComment(file)
  apple_script = "tell application \"Finder\" to get comment of alias POSIX file \"#{escapeQ(file)}\""
  cmd = "osascript -e \"#{escapeQ(apple_script)}\""
  `#{cmd}`.strip
end

def chmod777(file)
  puts "  setting rights of ".magenta + file.blue + " to ".magenta + "0777".green
  File.chmod 0777, file
end

def process(file)
  stat = File.stat(file)
  owner = Etc.getpwuid(stat.uid).name
  chmod777(file) unless (stat.mode & 0777 == 0777)
  setFinderComment(file, owner) unless owner == getFinderComment(file)
end

def perform_initial_checks(folder)
  Dir.glob(File.join(folder, "**", "*")) do |file|
    process file
  end
end

callback = Proc.new do |modified, added, removed|
  # puts "---------------------------------------------------------------------------------------------------"
  # puts "got modifications:\n#{modified.to_s.green}\n#{added.to_s.yellow}\n#{removed.to_s.red}"

  # build a queue of all files
  queue = []
  modified.each { |file| queue << [file, "modified"] }
  added.each { |file| queue << [file, "added"] }
  # removed.each { |file| queue << [file, "removed"] }

  return unless queue.size>0

  # run through all affected files
  puts "processing #{queue.size} changed file(s):"
  queue.each do |item|
    process item[0]
  end
end

# TODO: paths & listener options should be configured via some config file
root = File.expand_path('/tmp/permdog-test/watched-folder')

puts "Performing initial checks..."
perform_initial_checks(root)

puts "Listening for changes..."
listener = Listen.to(root)
listener.change(&callback)
listener.start # blocks!