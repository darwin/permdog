#!/usr/bin/env ruby

require 'bundler/setup'
require 'listen'
require 'colored'
require 'plist'
require 'open3'
require 'etc'

def escapeQ(s)
  s.gsub("\n", "\\n").gsub('\\', '\\\\').gsub('"','\"')
end

def setFinderComment(file, comment)
  # this is more universal approach, but this does not refresh the Finder:
  #
  # plist = [comment].to_plist
  # encoded_binary_list = ""
  # Open3.popen3("plutil -convert binary1 -o - - | xxd -ps") do |stdin, stdout, stderr|
  #   stdin.print plist
  #   stdin.close
  #   encoded_binary_list = stdout.read
  # end
  # cmd = "xattr -wx com.apple.metadata:kMDItemFinderComment \"#{encoded_binary_list}\" \"#{file}\""

  # call applescript for rescue
  apple_script = "tell application \"Finder\" to set comment of alias POSIX file \"#{escapeQ(file)}\" to \"#{escapeQ(comment)}\""
  cmd = "osascript -e \"#{escapeQ(apple_script)}\""
  puts "  setting comment of ".magenta + file.blue + " to ".magenta + comment.green
  `#{cmd}`
end

def getFinderComment(file)
  # cmd = "xattr -p com.apple.metadata:kMDItemFinderComment \"#{file}\" | xxd -r -p | plutil -convert xml1 -o - -"

  # call applescript for rescue
  apple_script = "tell application \"Finder\" to get comment of alias POSIX file \"#{escapeQ(file)}\""
  cmd = "osascript -e \"#{escapeQ(apple_script)}\""
  `#{cmd}`.strip
end

def chmod777(file)
  puts "  setting rights of ".magenta + file.blue + " to ".magenta + "0777".green
  File.chmod 0777, file
end

callback = Proc.new do |modified, added, removed|
  # puts "---------------------------------------------------------------------------------------------------"
  # puts "got modifications:\n#{modified.to_s.green}\n#{added.to_s.yellow}\n#{removed.to_s.red}"

  # build a queue of all files
  queue = []
  modified.each { |file| queue << [file, "modified"] }
  added.each { |file| queue << [file, "added"] }
  # removed.each { |file| queue << [file, "removed"] }

  return unless queue.size>0

  # run through all affected files
  puts "processing #{queue.size} changed file(s):"
  queue.each do |item|
    file = item[0]
    kind = item[1]

    stat = File.stat(file)
    owner = Etc.getpwuid(stat.uid).name
    chmod777(file) unless (stat.mode & 0777 == 0777)
    setFinderComment(file, owner) unless owner == getFinderComment(file)
  end
end

# TODO: paths & listener options should be configured via some config file
listener = Listen.to(File.expand_path('/tmp/permdog-test/watched-folder'))
listener.change(&callback)

puts "Listening for changes..."
listener.start # blocks!