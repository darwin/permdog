#!/usr/bin/env ruby

require 'bundler/setup'
require 'listen'
require 'colored'
require 'etc'

########################################################################################################################
# aaaaagh!

# monkey patch Listen to report also ownership changes and mode changes as file modifications
module Listen
  class DirectoryRecord
    MetaData = Struct.new(:type, :mtime, :mode, :uid)

    def insert_path(path)
      stat = File.stat(path)
      meta_data = MetaData.new
      meta_data.type = File.directory?(path) ? 'Dir' : 'File'
      meta_data.mtime = mtime_of(path) unless meta_data.type == 'Dir' # mtimes of dirs are not used yet
      meta_data.mode = stat.mode
      meta_data.uid = stat.uid
      @paths[File.dirname(path)][File.basename(path)] = meta_data
    rescue Errno::ENOENT
    end

    def detect_modifications_and_removals(directory, options = {})
       @paths[directory].each do |basename, meta_data|
         path = File.join(directory, basename)

         case meta_data.type
         when 'Dir'
           if File.directory?(path)
             detect_modifications_and_removals(path, options) if options[:recursive]
           else
             detect_modifications_and_removals(path, { :recursive => true }.merge(options))
             @paths[directory].delete(basename)
             @paths.delete("#{directory}/#{basename}")
           end
         when 'File'
           if File.exist?(path)
             new_mtime = mtime_of(path)
             stat = File.stat(path)

             # First check if we are in the same second (to update checksums)
             # before checking the time difference
             if stat.mode != meta_data.mode || stat.uid != meta_data.uid || (meta_data.mtime.to_i == new_mtime.to_i && content_modified?(path)) || meta_data.mtime < new_mtime
               # Update the sha1 checksum of the file
               insert_sha1_checksum(path)

               # Update the meta data of the file
               meta_data.mtime = new_mtime
               meta_data.uid = stat.uid
               meta_data.mode = stat.mode
               @paths[directory][basename] = meta_data

               @changes[:modified] << (options[:relative_paths] ? relative_to_base(path) : path)
             end
           else
             @paths[directory].delete(basename)
             @sha1_checksums.delete(path)
             @changes[:removed] << (options[:relative_paths] ? relative_to_base(path) : path)
           end
         end
       end
     end
  end
end

########################################################################################################################

def escapeQ(s)
  s.gsub("\n", "\\n").gsub('\\', '\\\\').gsub('"','\"')
end

def setFinderComment(file, comment)
  apple_script = "tell application \"Finder\" to set comment of alias POSIX file \"#{escapeQ(file)}\" to \"#{escapeQ(comment)}\""
  cmd = "osascript -e \"#{escapeQ(apple_script)}\""
  puts "  setting comment of ".magenta + file.blue + " to ".magenta + comment.green
  `#{cmd}`
end

def getFinderComment(file)
  apple_script = "tell application \"Finder\" to get comment of alias POSIX file \"#{escapeQ(file)}\""
  cmd = "osascript -e \"#{escapeQ(apple_script)}\""
  `#{cmd}`.strip
end

def chmod777(file)
  puts "  setting rights of ".magenta + file.blue + " to ".magenta + "0777".green
  File.chmod 0777, file
end

def process(file)
  stat = File.stat(file)
  owner = Etc.getpwuid(stat.uid).name
  chmod777(file) unless (stat.mode & 0777 == 0777)
  setFinderComment(file, owner) unless owner == getFinderComment(file)
end

def perform_initial_checks(folder)
  Dir.glob(File.join(folder, "**", "*")) do |file|
    process file
  end
end

callback = Proc.new do |modified, added, removed|
  # puts "---------------------------------------------------------------------------------------------------"
  # puts "got modifications:\n#{modified.to_s.green}\n#{added.to_s.yellow}\n#{removed.to_s.red}"

  # build a queue of all files
  queue = []
  modified.each { |file| queue << [file, "modified"] }
  added.each { |file| queue << [file, "added"] }
  # removed.each { |file| queue << [file, "removed"] }

  return unless queue.size>0

  # run through all affected files
  puts "processing #{queue.size} changed file(s):"
  queue.each do |item|
    process item[0]
  end
end

# TODO: paths & listener options should be configured via some config file
root = File.expand_path('/tmp/permdog-test/watched-folder')

puts "Performing initial checks..."
perform_initial_checks(root)

puts "Listening for changes..."
listener = Listen.to(root)
listener.change(&callback)
listener.start # blocks!